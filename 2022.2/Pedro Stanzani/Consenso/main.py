import time
import requests

from hashlib import sha256
from merkle import calculate_merkle_root

def double_hash(s):
    h = sha256(s.encode()).hexdigest()
    return sha256(h.encode()).hexdigest()

def get_info():
    url = "https://blockchainsper.herokuapp.com/info"
    r = requests.get(url)
    return r.json()

def find_nonce(block_structure, difficulty):
    nonce = 0
    while True:
        s = block_structure + str(nonce)
        block_hash = double_hash(s)

        if block_hash[0:difficulty] == '0' * difficulty:
            print(f"Found nonce: {nonce}")
            print(f"Hash: {block_hash}")
            return nonce

        nonce += 1

def mine(transactions):
    info = get_info()
    difficulty    = info['difficulty']
    height        = info['height']
    previous_hash = info['last_hash']

    merkle_root = calculate_merkle_root(transactions)
    timestamp = time.time()

    block_structure = f"{height}{previous_hash}{merkle_root}{timestamp}{difficulty}"
    nonce = find_nonce(block_structure, difficulty)

    data = {
        'difficulty':    difficulty,
        'height':        height,
        'merkle_root':   merkle_root,
        'nonce':         nonce,
        'previous_hash': previous_hash,
        'timestamp':     timestamp,
        'tx':            transactions
    }

    r = requests.post('https://blockchainsper.herokuapp.com/mine', json=data)
    return r

class Validations:
    @staticmethod
    def get_last_block():
        r = requests.get('https://blockchainsper.herokuapp.com')
        return r.json()['chain'][-1]

    @staticmethod
    def debug_hashing(data, block_hash):
        tx = data['tx']
        merkle_root = data['merkle_root']

        if calculate_merkle_root(tx) != merkle_root:
            return False, "Merkle Root"

        height        = data['height']
        previous_hash = data['previous_hash']
        timestamp     = data['timestamp']
        difficulty    = data['difficulty']
        nonce         = data['nonce']

        block_structure = f"{height}{previous_hash}{merkle_root}{timestamp}{difficulty}{nonce}"
        hash_ = double_hash(block_structure)

        print()
        print("        This is the last block's actual hash: ", block_hash)
        print("This hash is being generated by this program: ", hash_)

        if block_hash == hash_:
            return True
        return False, "Hash"

if __name__ == '__main__':
    transactions = ["Reteste"]
    r = mine(transactions)

    print(f"The request has been sent. Status code: {r.status_code}")
